#!/bin/bash

# Enable curl alias
alias curl="curl --insecure --max-time 5 --silent --user-agent \
	'Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko'"
shopt -s expand_aliases

# Associative array with user as key and password as value
declare -A CREDENTIALS
KEEPALIVE_URL=""
SLEEP_PID=""
USAGE="Usage: $(basename "$0") [-u <username>] [-p <password>] [-f <credentials_filename>]"

cmd_available() {
	command -v "$1" &> /dev/null
}

# Print arguments to stderr and exit
fail() {
	printf "%s\n" "$*" 1>&2
	exit 1
}

get_effective_url() {
	curl --location --output /dev/null --write-out "%{url_effective}" "$1"
}

# Is stdout open and refers to a terminal?
is_stdout_term() {
	[[ -t 1 ]]
}

# Remove $2 from front and $3 from back of the string $1
remove_substr() {
	local tmp=${1##$2}
	echo "${tmp%%$3}"
}

# Shuffle order of lines
# http://mywiki.wooledge.org/BashFAQ/026
randomize() {
	while IFS='' read -r line
	do
		printf "%d\t%s\n" "$RANDOM" "$line"
	done |
	sort -n |
	cut -f 2-
}

# File should contain whitespace delimited list of user and password pairs
read_credentials_from_file() {
	local filename user password
	filename="$1"

	while read -r user password
	do
		CREDENTIALS[$user]=$password
	done < <(randomize < "$filename")
}

# Get user and password from parameters/stdin/file
get_credentials() {
	local filename user password
	while getopts ":u:p:f:" opt
	do
		case $opt in
			u) user=$OPTARG ;;
			p) password=$OPTARG ;;
			f) filename=$OPTARG ;;
		esac
	done

	if [[ -n $user ]] && [[ -n $password ]]
	then
		CREDENTIALS[$user]=$password
	elif [[ -n $filename ]] && [[ -f $filename ]]
	then
		# Read from file provided it exists
		read_credentials_from_file "$filename"
	fi

	[[ ${#CREDENTIALS[@]} -eq 0 ]] && return 1
}

do_logout() {
	local logout_url=${KEEPALIVE_URL/keepalive/logout}
	if curl "$logout_url" &> /dev/null
	then
		echo "" && echo "Logged out."
	else
		fail "Error logging out."
	fi
}

keepalive() {
	local html countdown
	while true
	do
		html=$(curl --output - "$KEEPALIVE_URL")
		[[ $? -ne 0 ]] && fail "Error in authentication refresh."

		countdown=$(remove_substr "$html" \
					"*var countDownTime=" \
					" + 1;*")
		countdown=$((countdown - 5))

		sleep "$countdown" & SLEEP_PID=$!
		wait "$SLEEP_PID"
	done
}

# Logout & kill subprocesses
cleanup() {
	disown -a
	[[ -n "$SLEEP_PID" ]] && kill "$SLEEP_PID" &> /dev/null
	do_logout
}

main() {
	local google effective_url base_url magic html user logged_in

	# Do we have curl?
	cmd_available "curl" || fail "Please install curl."

	google="www.google.com/"
	effective_url=$(get_effective_url "$google")

	# Did we get redirected to the authentication page?
	echo "$effective_url" | grep -q "fgtauth" || \
		fail "Did NOT get redirected to authentication page."

	# Get login credentials
	get_credentials "$@" || fail "$USAGE"

	# Extract base URL and magic parameter
	base_url=$(remove_substr "$effective_url" "" "fgtauth*")
	magic=$(remove_substr "$effective_url" "*fgtauth\?" "" )

	for user in "${!CREDENTIALS[@]}"
	do
		# POST form data to base_url
		html=$(curl --output - \
			--data-urlencode 4Tredir="$google" \
			--data-urlencode magic="$magic" \
			--data-urlencode username="$user" \
			--data-urlencode password="${CREDENTIALS[$user]}" \
			"$base_url")

		# Failed?
		if echo "$html" | grep -qi "failed"
		then
			echo "Authentication failed with username $user." 1>&2
		else
			echo "Logged in with username $user."
			logged_in=1
			break
		fi
	done

	[[ -z $logged_in ]] && fail "Failed."
	is_stdout_term && echo "Press Ctrl-C to logout."
	unset CREDENTIALS

	KEEPALIVE_URL=$(remove_substr "$html" "*location.href=\"" "\";*")

	# Logout on exit
	trap "cleanup" EXIT

	keepalive
}

main "$@"
